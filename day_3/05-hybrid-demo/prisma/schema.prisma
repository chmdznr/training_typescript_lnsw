// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Relational data models for PostgreSQL
// Focus on transactional and relational data

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  orders Order[]

  @@map("users")
}

model Order {
  id           Int         @id @default(autoincrement())
  orderNumber  String      @unique @map("order_number")
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @map("total_amount") @db.Decimal(10, 2)
  currency     String      @default("USD")
  
  // Customer information
  userId       Int         @map("user_id")
  user         User        @relation(fields: [userId], references: [id])
  
  // Shipping
  shippingAddress String?  @map("shipping_address")
  shippingCost    Decimal? @map("shipping_cost") @db.Decimal(10, 2)
  
  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  shippedAt    DateTime? @map("shipped_at")
  deliveredAt  DateTime? @map("delivered_at")

  // Relationships
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId String  @map("product_id") // MongoDB ObjectId as string
  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Product snapshot (denormalized for historical accuracy)
  productName        String  @map("product_name")
  productDescription String? @map("product_description")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @map("order_id")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  
  // Payment provider data
  transactionId String? @map("transaction_id")
  providerId    String? @map("provider_id")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  paidAt    DateTime? @map("paid_at")

  // Relationships
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
